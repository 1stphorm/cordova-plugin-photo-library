language:
  #- android
  - objective-c

os:
  # The value of the $TRAVIS_OS_NAME variable is set to linux or osx according to the operating system a particular build is running on
  # Usage: - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then command; fi
  #- linux
  - osx

osx_image: xcode8.1 # 8.2 causes multiple simulators error

env:
  global:
    - EMULATOR_API_LEVEL=24
    - SIMULATOR_TYPE=iPhone-5
    - IOS_VERSION=10.1 # 10.1 for xcode8.1

# jdk is for Android only, commend on osx to prevent error
# jdk:
#   - oraclejdk8

sudo: false

android:
  components:
    # We want to use the latest revision of Android SDK Tools
    - platform-tools
    - tools

    # The BuildTools version used by your project
    - build-tools-24.0.3

    # The SDK version used to compile your project
    - android-24

    # Needed by emulator
    - android-$EMULATOR_API_LEVEL

    # Additional components
    # - extra-google-google_play_services
    # - extra-google-m2repository
    # - extra-android-m2repository
    # - addon-google_apis-google-19

    # Specify at least one system image, if you need to run emulator(s) during your tests
    - sys-img-armeabi-v7a-android-$EMULATOR_API_LEVEL

    # To get a list of available exact component names and descriptions run the command android list sdk --no-ui --all --extended

# osx only. On android, will be ignored. Use nvm instead (see below).
#node_js:
#  - "6"

before_install:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew update; fi
  - nvm install 6
  - node --version

install:
  - npm install
  - npm install -g cordova
  - cordova --version
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then npm install -g ios-deploy; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then npm install -g ios-sim; fi

before_script:
  - pwd
  - echo $PATH
  #- which adb
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then echo no | android create avd --force -n test -t android-$EMULATOR_API_LEVEL --abi armeabi-v7a; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then emulator -avd test -no-audio -no-window -memory 1024 & fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then android-wait-for-emulator; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then adb shell input keyevent 82 & fi #KEYCODE_MENU
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then adb shell mount -o rw,remount rootfs /; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then npm run copy-test-images:android:emulator; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then cat ./node_modules/adb-ci/adb-ci.txt; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then ios-sim start --devicetypeid "com.apple.CoreSimulator.SimDeviceType.iPhone-5, 10.1"; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then npm run copy-test-images:ios:simulator; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then bash tests/ios/grant-simulator-permissions.sh; fi

script:
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then npm run test:android; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then npm run test:ios; fi
  #-- --target "'$SIMULATOR_TYPE,\\ $IOS_VERSION'"

after_failure:
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then cat ./node_modules/adb-ci/adb-ci.txt; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then adb logcat; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then cat ~/Library/Logs/CoreSimulator/CoreSimulator.log; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then cat ~/Library/Logs/CoreSimulator/$(bash tests/ios/get-booted-simulator.sh)/system.log; fi

# before_cache:
#   - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
#   - rm -fr $HOME/.gradle/caches/*/plugin-resolution/
# cache:
#   directories:
#     - $HOME/.gradle/caches/
#     - $HOME/.gradle/wrapper/
